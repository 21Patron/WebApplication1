@model WebApplication1.Models.QuizQuestion
@{
    ViewData["Title"] = "Edit Question";
    var currentDateTime = "2025-05-15 14:58:23";
    var currentUser = "NiqueWrld";

    var questionTypes = new SelectList(new[]
    {
        new { Value = "MultipleChoice", Text = "Multiple Choice" },
        new { Value = "ShortAnswer", Text = "Short Answer" },
        new { Value = "TrueOrFalse", Text = "True/False" }
    }, "Value", "Text", Model.Type.ToString());

    // Parse options if present
    List<string> options = new List<string>();
    if (!string.IsNullOrEmpty(Model.OptionsJson) && Model.Type == QuestionType.MultipleChoice)
    {
        try
        {
            options = System.Text.Json.JsonSerializer.Deserialize<List<string>>(Model.OptionsJson);
        }
        catch
        {
            options = new List<string>();
        }
    }

    // Ensure we have at least 4 options for UI
    while (options.Count < 4)
    {
        options.Add("");
    }
}

<div class="bg-gray-50 min-h-screen py-8">
    <div class="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Header with User Info and Time -->
        <div class="mb-6 bg-white rounded-lg shadow overflow-hidden">
            <div class="px-4 py-3 border-b border-gray-200 flex justify-between items-center">
                <div class="flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-indigo-500 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                    </svg>
                    <span class="text-sm font-medium text-gray-900">@currentUser</span>
                </div>
                <div class="flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    <span class="text-sm text-gray-500">@currentDateTime (UTC)</span>
                </div>
            </div>
        </div>

        <!-- Breadcrumbs Navigation -->
        <nav class="mb-6 flex items-center text-sm font-medium">
            <a href="@Url.Action("Index", "Instructor")" class="text-gray-500 hover:text-gray-700">Dashboard</a>
            <svg class="h-5 w-5 text-gray-400 mx-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
            </svg>
            <a href="@Url.Action("ModuleDetails", new { id = Model.Quiz.ModuleId })" class="text-gray-500 hover:text-gray-700">@Model.Quiz.Module.ModuleName</a>
            <svg class="h-5 w-5 text-gray-400 mx-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
            </svg>
            <a href="@Url.Action("EditQuiz", new { id = Model.QuizId })" class="text-gray-500 hover:text-gray-700">@Model.Quiz.Title</a>
            <svg class="h-5 w-5 text-gray-400 mx-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
            </svg>
            <span class="text-gray-900">Edit Question</span>
        </nav>

        <!-- Page Title -->
        <div class="mb-8">
            <h1 class="text-2xl font-bold text-gray-900">Edit Question</h1>
            <p class="mt-2 text-sm text-gray-500">
                Modify this question for quiz: @Model.Quiz.Title
            </p>
        </div>

        <!-- Question Form -->
        <form asp-action="EditQuizQuestion" asp-controller="Lecturer" method="post" enctype="multipart/form-data" class="space-y-8">
            <input type="hidden" asp-for="QuestionId" />
            <input type="hidden" asp-for="QuizId" />

            <!-- Question Type -->
            <div class="bg-white shadow overflow-hidden sm:rounded-lg">
                <div class="px-4 py-5 sm:p-6">
                    <div class="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-6">
                        <div class="sm:col-span-3">
                            <label asp-for="Type" class="block text-sm font-medium text-gray-700">Question Type</label>
                            <div class="mt-1">
                                <select asp-for="Type" asp-items="questionTypes" id="questionType"
                                        class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md">
                                </select>
                            </div>
                        </div>

                        <div class="sm:col-span-3">
                            <label asp-for="Points" class="block text-sm font-medium text-gray-700">Points</label>
                            <div class="mt-1">
                                <input asp-for="Points" type="number" min="0" step="1"
                                       class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md">
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Question Text and Image -->
            <div class="bg-white shadow overflow-hidden sm:rounded-lg">
                <div class="px-4 py-5 sm:p-6">
                    <div class="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-6">
                        <div class="sm:col-span-6">
                            <label asp-for="QuestionText" class="block text-sm font-medium text-gray-700">Question Text</label>
                            <div class="mt-1">
                                <textarea asp-for="QuestionText" rows="3"
                                          class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md"
                                          placeholder="Enter your question here..."></textarea>
                            </div>
                        </div>

                        <div class="sm:col-span-6">
                            <label class="block text-sm font-medium text-gray-700">Question Image</label>
                            <div class="mt-1 flex items-center">
                                @if (!string.IsNullOrEmpty(Model.ImageUrl))
                                {
                                    <div class="mb-3">
                                        <img src="@Model.ImageUrl" alt="Current question image" class="max-h-40 object-contain rounded border border-gray-200" />
                                        <div class="mt-1 flex items-center">
                                            <input type="checkbox" id="removeImage" name="RemoveImage" class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded">
                                            <label for="removeImage" class="ml-2 block text-sm text-gray-900">Remove this image</label>
                                        </div>
                                    </div>
                                }
                                <div class="flex w-full">
                                    <input type="file" name="QuestionImage" id="questionImage" accept="image/*"
                                           class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md text-sm text-gray-700 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100">
                                </div>
                            </div>
                            <p class="mt-1 text-sm text-gray-500">Optional. PNG, JPG, GIF up to 5MB.</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Multiple Choice Options -->
            <div id="multipleChoiceOptions" class="bg-white shadow overflow-hidden sm:rounded-lg @(Model.Type != QuestionType.MultipleChoice ? "hidden" : "")">
                <div class="px-4 py-5 sm:p-6">
                    <h3 class="text-lg leading-6 font-medium text-gray-900">Multiple Choice Options</h3>
                    <div class="mt-5 border-t border-gray-200 pt-5">
                        <div id="optionsContainer" class="space-y-4">
                            @for (int i = 0; i < options.Count; i++)
                            {
                                var option = options[i];
                                var optionId = $"option_{i}";
                                <div class="option-row flex items-start">
                                    <div class="mt-1 mr-2">
                                        <input type="radio" id="@optionId" name="CorrectOption" value="@i" class="focus:ring-indigo-500 h-5 w-5 text-indigo-600 border-gray-300"
                                        @(option == Model.CorrectAnswer ? "checked" : "") />
                                    </div>
                                    <div class="flex-grow">
                                        <div class="flex items-center">
                                            <input type="text" name="Options[@i]" value="@option" placeholder="Option @(i+1)"
                                                   class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md" />
                                            @if (i > 1) // Always keep at least 2 options
                                            {
                                                <button type="button" class="remove-option ml-2 inline-flex items-center p-1 border border-transparent rounded-full text-red-600 hover:bg-red-50 focus:outline-none">
                                                    <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                                    </svg>
                                                </button>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                        <div class="mt-4">
                            <button type="button" id="addOption" class="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                <svg class="h-5 w-5 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                                </svg>
                                Add Option
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- True/False Options -->
            <div id="trueFalseOptions" class="bg-white shadow overflow-hidden sm:rounded-lg @(Model.Type != QuestionType.TrueFalse ? "hidden" : "")">
                <div class="px-4 py-5 sm:p-6">
                    <h3 class="text-lg leading-6 font-medium text-gray-900">Correct Answer</h3>
                    <div class="mt-5 space-y-4">
                        <div class="flex items-start">
                            <div class="flex items-center h-5">
                                <input id="answerTrue" name="TrueFalseAnswer" type="radio" value="True" class="focus:ring-indigo-500 h-5 w-5 text-indigo-600 border-gray-300"
                                @(Model.CorrectAnswer == "True" ? "checked" : "") />
                            </div>
                            <div class="ml-3 text-sm">
                                <label for="answerTrue" class="font-medium text-gray-700">True</label>
                            </div>
                        </div>
                        <div class="flex items-start">
                            <div class="flex items-center h-5">
                                <input id="answerFalse" name="TrueFalseAnswer" type="radio" value="False" class="focus:ring-indigo-500 h-5 w-5 text-indigo-600 border-gray-300"
                                @(Model.CorrectAnswer == "False" ? "checked" : "") />
                            </div>
                            <div class="ml-3 text-sm">
                                <label for="answerFalse" class="font-medium text-gray-700">False</label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Short Answer -->
            <div id="shortAnswerOptions" class="bg-white shadow overflow-hidden sm:rounded-lg @(Model.Type != QuestionType.ShortAnswer ? "hidden" : "")">
                <div class="px-4 py-5 sm:p-6">
                    <h3 class="text-lg leading-6 font-medium text-gray-900">Correct Answer</h3>
                    <p class="mt-1 text-sm text-gray-500">
                        Enter the expected answer or leave blank if it needs manual grading.
                    </p>
                    <div class="mt-5">
                        <textarea id="correctAnswer" name="ShortAnswer" rows="3"
                                  class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md">@(Model.Type == QuestionType.ShortAnswer ? Model.CorrectAnswer : "")</textarea>
                        <p class="mt-1 text-sm text-gray-500">
                            Note: Short answer questions may require manual grading.
                        </p>
                    </div>
                </div>
            </div>

            <!-- Form Actions -->
            <div class="flex justify-end space-x-3">
                <a href="@Url.Action("EditQuiz", new { id = Model.QuizId })" class="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none">
                    Cancel
                </a>
                <button type="submit" class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none">
                    Save Question
                </button>
            </div>
        </form>

    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Handle question type change
            const questionType = document.getElementById('questionType');
            const multipleChoiceOptions = document.getElementById('multipleChoiceOptions');
            const trueFalseOptions = document.getElementById('trueFalseOptions');
            const shortAnswerOptions = document.getElementById('shortAnswerOptions');

            questionType.addEventListener('change', function() {
                // Hide all option sections first
                multipleChoiceOptions.classList.add('hidden');
                trueFalseOptions.classList.add('hidden');
                shortAnswerOptions.classList.add('hidden');

                // Show the appropriate section based on selection
                if (this.value === 'MultipleChoice') {
                    multipleChoiceOptions.classList.remove('hidden');
                } else if (this.value === 'TrueOrFalse') {
                    trueFalseOptions.classList.remove('hidden');
                } else if (this.value === 'ShortAnswer') {
                    shortAnswerOptions.classList.remove('hidden');
                }
            });

            // Add option button functionality
            const addOptionButton = document.getElementById('addOption');
            const optionsContainer = document.getElementById('optionsContainer');

            addOptionButton.addEventListener('click', function() {
                const optionCount = optionsContainer.children.length;
                const newOption = document.createElement('div');
                newOption.className = 'option-row flex items-start';
                newOption.innerHTML = `
                    <div class="mt-1 mr-2">
                        <input type="radio" id="option_${optionCount}" name="CorrectOption" value="${optionCount}" class="focus:ring-indigo-500 h-5 w-5 text-indigo-600 border-gray-300" />
                    </div>
                    <div class="flex-grow">
                        <div class="flex items-center">
                            <input type="text" name="Options[${optionCount}]" placeholder="Option ${optionCount + 1}" class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md" />
                            <button type="button" class="remove-option ml-2 inline-flex items-center p-1 border border-transparent rounded-full text-red-600 hover:bg-red-50 focus:outline-none">
                                <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                </svg>
                            </button>
                        </div>
                    </div>
                `;
                optionsContainer.appendChild(newOption);

                // Attach event listener to the new remove button
                newOption.querySelector('.remove-option').addEventListener('click', function() {
                    optionsContainer.removeChild(newOption);
                    updateOptionIndices();
                });
            });

            // Attach event listeners to existing remove buttons
            document.querySelectorAll('.remove-option').forEach(button => {
                button.addEventListener('click', function() {
                    const optionRow = this.closest('.option-row');
                    optionsContainer.removeChild(optionRow);
                    updateOptionIndices();
                });
            });

            // Function to update option indices after removal
            function updateOptionIndices() {
                const options = optionsContainer.querySelectorAll('.option-row');
                options.forEach((option, index) => {
                    const radio = option.querySelector('input[type="radio"]');
                    const textInput = option.querySelector('input[type="text"]');

                    radio.id = `option_${index}`;
                    radio.value = index;

                    textInput.name = `Options[${index}]`;
                    textInput.placeholder = `Option ${index + 1}`;
                });
            }

            // Form validation
            const form = document.querySelector('form');
            form.addEventListener('submit', function(e) {
                const activeType = questionType.value;
                let isValid = true;

                // Basic validation for question text
                if (!document.querySelector('textarea[name="Text"]').value.trim()) {
                    alert('Please enter question text.');
                    isValid = false;
                }

                // Validation for Multiple Choice
                if (activeType === 'MultipleChoice') {
                    const options = optionsContainer.querySelectorAll('input[type="text"]');
                    const hasEmptyOption = Array.from(options).some(input => !input.value.trim());

                    if (hasEmptyOption) {
                        alert('Please fill in all multiple choice options.');
                        isValid = false;
                    }

                    const hasSelectedOption = optionsContainer.querySelector('input[type="radio"]:checked');
                    if (!hasSelectedOption) {
                        alert('Please select the correct answer.');
                        isValid = false;
                    }
                }

                // Validation for True/False
                if (activeType === 'TrueOrFalse') {
                    const hasSelectedAnswer = document.querySelector('input[name="TrueFalseAnswer"]:checked');
                    if (!hasSelectedAnswer) {
                        alert('Please select either True or False as the correct answer.');
                        isValid = false;
                    }
                }

                if (!isValid) {
                    e.preventDefault();
                }
            });
        });
    </script>
}